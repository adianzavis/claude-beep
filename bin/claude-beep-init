#!/usr/bin/env bash
set -euo pipefail

# claude-beep-init - Initialize Claude Code hooks for beep notifications

PROJECT_SETTINGS="./.claude/settings.local.json"
HOME_SETTINGS="${HOME}/.claude/settings.local.json"

# Prefer project settings - create .claude directory if we're in a project-like directory
if [[ -d ".git" ]] || [[ -f "package.json" ]] || [[ -f "pyproject.toml" ]] || [[ -f "Cargo.toml" ]] || [[ -d ".claude" ]] || [[ -f "$PROJECT_SETTINGS" ]]; then
  # Create .claude directory if it doesn't exist
  mkdir -p ".claude"
  SETTINGS_FILE="$PROJECT_SETTINGS"
  SCOPE="project"
else
  SETTINGS_FILE="$HOME_SETTINGS"
  SCOPE="global"
fi

# Function to display usage
usage() {
    cat << EOF
Usage: claude-beep-init [OPTIONS]

Initialize Claude Code hooks for beep notifications.

OPTIONS:
    -h, --help     Show this help message
    -f, --force    Overwrite existing hooks configuration
    --remove       Remove beep hooks from configuration

DESCRIPTION:
    This command adds beep notification hooks to your Claude Code settings:
    - Success beep on "Stop" events 
    - Disturb beep on "Notification" events

    Settings file: $SETTINGS_FILE ($SCOPE)

EOF
}

# Check if commands exist
SUCCESS_CMD="beep-success"
DISTURB_CMD="beep-disturb"

if ! command -v "$SUCCESS_CMD" >/dev/null 2>&1; then
  echo "Error: $SUCCESS_CMD not found in PATH." >&2
  exit 1
fi

if ! command -v "$DISTURB_CMD" >/dev/null 2>&1; then
  echo "Error: $DISTURB_CMD not found in PATH." >&2
  exit 1
fi

# Function to check if hooks already exist
hooks_exist() {
    local file="$1"
    if [[ ! -f "$file" ]]; then
        return 1
    fi
    
    if command -v jq >/dev/null 2>&1; then
        # Check if beep-success exists in Stop hooks
        local has_stop=$(jq -r '.hooks.Stop[]?.hooks[]? | select(.type == "command" and .command == "beep-success") | .command' "$file" 2>/dev/null | head -1)
        # Check if beep-disturb exists in Notification hooks  
        local has_notification=$(jq -r '.hooks.Notification[]?.hooks[]? | select(.type == "command" and .command == "beep-disturb") | .command' "$file" 2>/dev/null | head -1)
        
        if [[ "$has_stop" == "beep-success" && "$has_notification" == "beep-disturb" ]]; then
            return 0
        fi
    fi
    return 1
}

# Function to add hooks
add_hooks() {
    local file="$1"
    local force="$2"
    
    mkdir -p "$(dirname "$file")"
    
    # Check if hooks already exist
    if hooks_exist "$file" && [[ "$force" != "true" ]]; then
        echo "‚ö†Ô∏è  Beep hooks already exist in Claude settings"
        echo "   Use --force to overwrite existing configuration"
        return 1
    fi
    
    
    # Ensure directory exists
    mkdir -p "$(dirname "$file")"
    
    # Create or update the settings file
    if command -v jq >/dev/null 2>&1; then
        # Use jq to handle both existing and new files
        if [[ ! -f "$file" ]]; then
            # Create empty JSON if file doesn't exist
            echo '{}' > "$file"
        fi
        
        # Use jq to append beep hooks to existing arrays without replacing them
        local temp_file=$(mktemp)
        jq '. as $root |
            .hooks //= {} |
            .hooks.Stop //= [] |
            .hooks.Notification //= [] |
            # Add beep-success hook to Stop if not already present
            if (.hooks.Stop | any(type == "object" and .hooks[]?.type == "command" and .hooks[]?.command == "beep-success")) then .
            else .hooks.Stop += [{"hooks": [{"type": "command", "command": "beep-success"}]}] end |
            # Add beep-disturb hook to Notification if not already present  
            if (.hooks.Notification | any(type == "object" and .hooks[]?.type == "command" and .hooks[]?.command == "beep-disturb")) then .
            else .hooks.Notification += [{"hooks": [{"type": "command", "command": "beep-disturb"}]}] end
        ' "$file" > "$temp_file" && mv "$temp_file" "$file"
    else
        # Handle case without jq
        if [[ -f "$file" ]]; then
            # File exists but jq not available - dangerous to modify
            echo "‚ùå jq not found. Cannot safely modify existing settings file."
            echo "   Please install jq or manually add hooks to: $file"
            return 1
        else
            # Create new file without jq
            cat > "$file" << 'EOF'
{
  "hooks": {
    "Stop": [
      {
        "hooks": [
          {
            "type": "command",
            "command": "beep-success"
          }
        ]
      }
    ],
    "Notification": [
      {
        "hooks": [
          {
            "type": "command", 
            "command": "beep-disturb"
          }
        ]
      }
    ]
  }
}
EOF
        fi
    fi
    
    echo "‚úÖ Beep hooks added to Claude settings!"
    echo "   Settings file: $file ($SCOPE)"
    echo ""
    echo "üîä Configured notifications:"
    echo "   ‚Ä¢ Success beep on task completion (Stop events)"
    echo "   ‚Ä¢ Disturb beep on notifications"
}

# Function to remove beep hooks
remove_hooks() {
    local file="$1"
    
    if [[ ! -f "$file" ]]; then
        echo "‚ùå Settings file not found: $file"
        return 1
    fi
    
    
    # Use jq to remove the beep hooks while preserving everything else
    if command -v jq >/dev/null 2>&1; then
        local temp_file=$(mktemp)
        jq '.hooks.Stop = (.hooks.Stop // [] | map(select(.hooks // [] | map(.command != "beep-success") | any))) |
            .hooks.Notification = (.hooks.Notification // [] | map(select(.hooks // [] | map(.command != "beep-disturb") | any)))' \
            "$file" > "$temp_file" && mv "$temp_file" "$file"
        echo "‚úÖ Beep hooks removed from Claude settings"
    else
        echo "‚ùå jq not found. Please install jq to remove hooks automatically"
        echo "   Or manually edit: $file"
        return 1
    fi
}

# Parse command line arguments
FORCE=false
REMOVE=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            exit 0
            ;;
        -f|--force)
            FORCE=true
            shift
            ;;
        --remove)
            REMOVE=true
            shift
            ;;
        *)
            echo "‚ùå Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Main execution
if [[ "$REMOVE" == "true" ]]; then
    echo "üóëÔ∏è  Removing beep hooks from Claude settings..."
    remove_hooks "$SETTINGS_FILE"
else
    echo "üîß Initializing Claude beep hooks..."
    add_hooks "$SETTINGS_FILE" "$FORCE"
fi