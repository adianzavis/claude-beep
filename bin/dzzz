#!/bin/zsh

# dzzz - MacBook touchpad vibration command
# Triggers haptic feedback using Force Touch trackpad

# Parse arguments
count=3
interval=0.1

while [[ $# -gt 0 ]]; do
  case $1 in
    *)
      # Numeric arguments for count and interval
      if [[ "$1" =~ ^[0-9]+$ ]] && [[ -z "$count_set" ]]; then
        count="$1"
        count_set=true
      elif [[ "$1" =~ ^[0-9]*\.?[0-9]+$ ]] && [[ -z "$interval_set" ]]; then
        interval="$1"
        interval_set=true
      fi
      shift
      ;;
  esac
done

# Try to trigger haptic feedback using NSHapticFeedbackPerformer
# This uses a simple Swift script to access the macOS haptic API
trigger_haptic() {
  osascript -e '
    on run
      tell application "System Events"
        -- This is a workaround using accessibility features
        -- We create a brief UI interaction that triggers haptic feedback
        try
          key code 0 using {command down, shift down, option down}
        end try
      end tell
    end run
  ' >/dev/null 2>&1
}

# Alternative method using private MultitouchSupport framework
trigger_haptic_native() {
  python3 -c "
import ctypes
import ctypes.util
import time

# Load the MultitouchSupport framework
mt_lib = ctypes.CDLL('/System/Library/PrivateFrameworks/MultitouchSupport.framework/MultitouchSupport')

# Define function signatures
mt_lib.MTDeviceCreateDefault.restype = ctypes.c_void_p
mt_lib.MTDeviceGetMTActuator.argtypes = [ctypes.c_void_p]
mt_lib.MTDeviceGetMTActuator.restype = ctypes.c_void_p
mt_lib.MTActuatorCreateFromDeviceID.argtypes = [ctypes.c_int]
mt_lib.MTActuatorCreateFromDeviceID.restype = ctypes.c_void_p

try:
    # Create device and actuator
    device = mt_lib.MTDeviceCreateDefault()
    if device:
        actuator = mt_lib.MTDeviceGetMTActuator(device)
        if actuator:
            # Trigger actuator (this is experimental and may not work)
            mt_lib.MTActuatorActuate(actuator, ctypes.c_int(6), ctypes.c_int(0), ctypes.c_float(1.0), ctypes.c_float(0.0))
except:
    pass  # Fail silently if this doesn't work
" 2>/dev/null || true
}

# Try Swift method for haptic feedback
trigger_haptic_swift() {
  # Get the directory where this script is located
  local script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
  swift "$script_dir/haptic.swift" 2>/dev/null || true
}

# Execute the vibration sequence
for ((i=0; i<count; i++)); do
  # Try different methods in order of preference
  trigger_haptic_swift || trigger_haptic_native || trigger_haptic
  
  if [[ $i -lt $((count-1)) ]]; then
    sleep "$interval"
  fi
done
